#!/usr/bin/env perl
use strict; use warnings;#{{{
use FindBin;
use feature qw/say/;
use lib "$FindBin::RealBin/../lib/perl5", "$FindBin::RealBin/../lib";
use Term::ReadKey;
use Getopt::Long qw/:config bundling/;
use Try::Tiny;
use IPC::System::Simple qw/system/;
use Ticket qw/cfg err/;
use API::Git;#}}}

my $project_key = cfg('project_key');
local $" = ',';
# process input
my %O = (
  workflow => 'ready,start!',
);
my $rtfm = not GetOptions(
  'h|help+'      => \$O{help},

  'y|yes'        => \$O{yes},
  'u|upstream=s' => \$O{upstream},
  'w|workflow:s' => \$O{workflow},
  'p|push'       => \$O{push},
);
my @keys = map { m/(\w+-\d+)/ ? $1 : (m/(\d+)/ ? $project_key.'-'.$1 : ()) } @ARGV;

if ($rtfm || $O{help}) {
  require Pod::Usage;
  Pod::Usage::pod2usage({-verbose => $O{help}-1, -exitval => $rtfm});
}
if (not @keys) {
  err "At least one $project_key is required";
}

my $fields_to_set = ['assignee=@', 'status=' . $O{workflow}];
my $branch;

sub confirm {
  if (!$O{yes}) {
    my ($branch) = @_;
    say "Proceed with $branch? [Yn]";
    my $choice = ReadKey;
    chomp $choice;
    if ($choice && lc $choice ne 'y') {
      say "Bye.";
      exit 0;
    }
  }

}

if ($#keys == 0) {
  $branch = Ticket::build_branch($keys[0]);
  confirm($branch);
  try {
    Ticket::manipulate_ticket($keys[0], $fields_to_set);
  } catch {
    use Data::Dump 'pp';
    warn pp $_;
  };
}
else {
  $branch = 'fixpack/' . join '_', @keys;
  confirm($branch);
  for (@keys) {
    Ticket::manipulate_ticket($_, $fields_to_set);
  }
}

API::Git::checkout_branch_assert($branch, $O{upstream});
__END__

=pod

=head1 NAME

dev_start - start work on issue in JIRA and git

=head1 SYNOPSIS

dev_start TICKETS...

dev_start TICKETS... -w [start,review,qa]

dev_start TICKETS... -u [origin/devel]

=head1 DESCRIPTION

Assigns $USER to the given TICKETS and sets them "In Progress" or traverses given $WORKFLOW path
Puts a branch into description and checkouts to it.
For a single TICKET, branch is built from issue type and summary, type/KEY-1_issue_summary_here
For multiple TICKETS given, the branch is fixpack/TICKET-1_TICKET-2_TICKET-3

=head1 OPTIONS

-w, --workflow [WORKFLOW]
    Comma-separated workflow actions to be performed on issue, e.g. 'start,review,qa'.
    Actions are matched case-insensitively, so 'qa' will match to 'In QA'. Defaults to 'start'

-u, --upstream [BRANCH]
    Defines the start point for the new feature branch. Defaults to 'HEAD'

=cut
