#!/usr/bin/env perl
use strict; use warnings;#{{{
use FindBin;
use lib "$FindBin::RealBin/../lib/perl5", "$FindBin::RealBin/../lib";
use autodie 'open';
use Data::Dump 'pp';
use List::MoreUtils qw/any/;
use Getopt::Long qw/:config bundling/;
use feature 'say';
use Ticket::LogZilla;
use Ticket qw/cfg/;#}}}

my $rtfm = not GetOptions( #{{{ handle input
    # 'j|job'       => \my $job,
    'v|verbose'     => \my $verbose,
    'junit=s'       => \my $junit,
    'h|help+'       => \my $help,
);
if ($rtfm or $help) {
    require Pod::Usage;
    Pod::Usage::pod2usage({-verbose => ($help//0)-1, -exitval => $rtfm});
}

my $committish = $ARGV[0] // 'HEAD';
my $target     = $ARGV[1] // cfg('remote').'/devel';
#}}}

my @files = @{ Ticket::LogZilla::untested_files($committish, $target) };

if (@files) {
    if ($verbose) {
        say pp \@files;
    } else {
        printf "Plan required to run (%d changed files)\n", scalar @files;
    }
} elsif ($junit) {
    unlink $junit;
    open my $f, '>', $junit;
    print $f '<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="lzpytest" skips="1" tests="1" time="1.0"><testcase classname="MockClass" file="mockfile" line="1" name="No needed jobs - tests skipped" time="1.0"></testcase></testsuite>';
}

exit (@files > 0);
__END__

=pod

=head1 NAME

needed_plans - see required bamboo jobs for branch

=head1 SYNOPSIS

needed_plans COMMITTISH TARGET [-v] [--junit PATH]

COMMITTISH defaults to "HEAD", i.e. the branch you are currently on
TARGET defaults to origin/devel, default target for merge requests

=head1 OPTIONS

-h  this message
-v  display untested paths
--junit PATH  On success, create a mock JUnit xml file under PATH

=cut
